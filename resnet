class BasicBlock(nn.Module):
    
    def __init__(self, in_channel, out_channel, stride=1, downsample=None):
        super(BasicBlock, self).__init__()

        self.downsample = downsample
        self.conv1 = nn.Conv2d(in_channel, out_channel, kernel_size=3, stride=stride, padding=1, bias = False)
        self.bn1 = nn.BatchNorm2d(out_channel)
        self.relu = nn.ReLU(inplace=True)
        self.conv2 = nn.Conv2d(out_channel, out_channel, kernel_size=3, padding=1, bias = False)
        self.bn2 = nn.BatchNorm2d(out_channel)
        
    def forward(self, x):
        shortcut = x
        
        out = self.conv1(x)
        out = self.bn1(out)
        out = self.relu(out)
        
        out = self.conv2(out)
        out = self.bn2(out)
        
        if self.downsample is not None:
            shortcut = self.downsample(x)
            
        out += shortcut
        out = self.relu(out)
        
        return out

class ResNet(nn.Module):
    def __init__(self, layers, num_classes = 2300):
        super(ResNet, self).__init__()
        
        hidden_sizes = [64, 128, 256, 512]
        
        self.conv1 = nn.Conv2d(3, hidden_sizes[0], kernel_size=1, stride=1, padding=0, bias = False)
        self.bn1 = nn.BatchNorm2d(hidden_sizes[0])
        self.relu = nn.ReLU(inplace = True)
        
        """
        self.layers = []
        self.layers.append(BasicBlock(hidden_sizes[0], hidden_sizes[0], 1))
        for _ in range(1, layers[0]):
            self.layers.append(BasicBlock(hidden_sizes[0], hidden_sizes[0]))

        downsample = nn.Sequential(nn.Conv2d(hidden_sizes[0], hidden_sizes[1], kernel_size=1, stride=1, bias=False),
                                   nn.BatchNorm2d(hidden_sizes[1]))
        self.layers.append(BasicBlock(hidden_sizes[0], hidden_sizes[1], 1, downsample))
        for _ in range(1, layers[1]):
            self.layers.append(BasicBlock(hidden_sizes[1], hidden_sizes[1]))

        downsample = nn.Sequential(nn.Conv2d(hidden_sizes[1], hidden_sizes[2], kernel_size=1, stride=2, bias=False),
                                   nn.BatchNorm2d(hidden_sizes[2]))
        self.layers.append(BasicBlock(hidden_sizes[1], hidden_sizes[2], 2, downsample))
        for _ in range(1, layers[2]):
            self.layers.append(BasicBlock(hidden_sizes[2], hidden_sizes[2]))

        downsample = nn.Sequential(nn.Conv2d(hidden_sizes[2], hidden_sizes[3], kernel_size=1, stride=2, bias=False),
                                   nn.BatchNorm2d(hidden_sizes[3]))
        self.layers.append(BasicBlock(hidden_sizes[2], hidden_sizes[3], 2, downsample))
        for _ in range(1, layers[3]):
            self.layers.append(BasicBlock(hidden_sizes[3], hidden_sizes[3]))
        print(self.layers)
        self.layers = nn.Sequential(*self.layers)
        
        """
        self.layer1 = []
        self.layer1.append(BasicBlock(hidden_sizes[0], hidden_sizes[0], 1))
        for _ in range(1, layers[0]):
            self.layer1.append(BasicBlock(hidden_sizes[0], hidden_sizes[0]))
        self.layer1 = nn.Sequential(*self.layer1)
        
        self.layer2 = []
        downsample = nn.Sequential(nn.Conv2d(hidden_sizes[0], hidden_sizes[1], kernel_size=1, stride=1, bias=False),
                                   nn.BatchNorm2d(128))
        self.layer2.append(BasicBlock(hidden_sizes[0], hidden_sizes[1], 1, downsample))
        for _ in range(1, layers[1]):
            self.layer2.append(BasicBlock(hidden_sizes[1], hidden_sizes[1]))
        self.layer2 = nn.Sequential(*self.layer2)
        
        self.layer3 = []
        downsample = nn.Sequential(nn.Conv2d(hidden_sizes[1], hidden_sizes[2], kernel_size=1, stride=2, bias=False),
                                   nn.BatchNorm2d(hidden_sizes[2]))
        self.layer3.append(BasicBlock(hidden_sizes[1], hidden_sizes[2], 2, downsample))
        for _ in range(1, layers[2]):
            self.layer3.append(BasicBlock(hidden_sizes[2], hidden_sizes[2]))
        self.layer3 = nn.Sequential(*self.layer3)
        
        self.layer4 = []
        downsample = nn.Sequential(nn.Conv2d(hidden_sizes[2], hidden_sizes[3], kernel_size=1, stride=2, bias=False),
                                   nn.BatchNorm2d(hidden_sizes[3]))
        self.layer4.append(BasicBlock(hidden_sizes[2], hidden_sizes[3], 2, downsample))
        for _ in range(1, layers[3]):
            self.layer4.append(BasicBlock(hidden_sizes[3], hidden_sizes[3]))
        self.layer4 = nn.Sequential(*self.layer4)
        
        
        
        self.avgpool = nn.AdaptiveAvgPool2d((1,1))
        self.fc = nn.Linear(hidden_sizes[3] , num_classes)
        
        for m in self.modules():
            if isinstance(m, nn.Conv2d):
                nn.init.kaiming_normal_(m.weight)
            elif isinstance(m, nn.BatchNorm2d):
                nn.init.constant_(m.weight, 1)
                nn.init.constant_(m.bias, 0)
    
    def forward(self, x):
        x = self.conv1(x)
        x = self.bn1(x)
        x = self.relu(x)
        
        x = self.layer1(x)
        x = self.layer2(x)
        x = self.layer3(x)
        x = self.layer4(x)
        
        #x = self.layers(x)
        
        x = self.avgpool(x)
        x = torch.flatten(x, 1)
        x = self.fc(x)
        
        return x